{"version":3,"sources":["components/button/Button.jsx","components/result/Result.jsx","components/reset/Reset.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Result","input","Reset","handleClear","App","state","addToInput","_this","setState","handleCalculate","math","handleReset","_this2","this","result_Result","button_Button","reset_Reset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09c2aaa7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst isOperator = (val) =>{\r\n    return !isNaN(val) || val ==='.' || val ==='=';\r\n} \r\n\r\nconst Button =(props) => {\r\n    return(\r\n        <div className={`my-button ${isOperator(props.children) ? null : 'sign'}`} onClick={() => props.handleClick(props.children)}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n    return(\r\n        <div className='input-result'>\r\n            {props.input}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\n\r\nconst Reset =(props) => {\r\n    return(\r\n        <div className='button-reset' onClick={props.handleClear}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reset;","import React, { Component } from 'react';\n\nimport * as math from 'mathjs';\n\nimport Button from './components/button/Button';\nimport Result from './components/result/Result';\nimport Reset from './components/reset/Reset';\n\nclass App extends Component{\n  state={\n    input:'',\n  }\n\n  addToInput = (val) => {\n    this.setState({\n      input: this.state.input + val\n    })\n  }\n\n  handleCalculate = () => {\n    this.setState({\n      input: math.evaluate(this.state.input)\n    })\n  }\n\n  handleReset = () => {\n    this.setState({\n      input: ''\n    })\n  }\n\n  render(){\n    return (\n      <div className='my-container d-flex justify-content-center align-items-center'>\n        <div className='col-12 col-md-3'>\n          <div className='row'>\n            <Result input={this.state.input}></Result>\n          </div>\n          <div className='row'>\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n          </div>\n          <div className='row'>\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.addToInput}>*</Button>\n          </div>\n          <div className='row'>\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div>\n          <div className='row'>\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={() => this.handleCalculate()}>=</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n          </div>\n          <div className='row'>\n            <Reset handleClear={() => this.handleReset()}>Clear</Reset>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}